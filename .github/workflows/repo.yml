name: pacman-repo
on:
  push:
    branches: [main]
    paths: ['packages/**']
  workflow_dispatch:
    inputs:
      rebuild_all:
        type: boolean
        default: false
  schedule:
    - cron: '0 3 * * *'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions: { contents: write }
    env:
      REPO_BRANCH: repo
      REPO_DIR: repo
      ARCH: x86_64
      DBNAME: custom

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: repo-branch-exists
        id: repobr
        shell: bash
        run: |
          git fetch origin "${REPO_BRANCH}:${REPO_BRANCH}" || true
          if git rev-parse --verify "${REPO_BRANCH}" >/dev/null 2>&1; then
            echo "exists=true"  >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: detect-dirs
        id: changes
        shell: bash
        run: |
          set -euo pipefail
          base_ref="${{ github.event.before || '' }}"
          rebuild="${{ github.event.inputs.rebuild_all || 'false' }}"
          if [[ "$rebuild" == "true" || "${{ steps.repobr.outputs.exists }}" != "true" ]]; then
            mapfile -t DIRS < <(find packages -mindepth 1 -maxdepth 1 -type d | sort)
          else
            if ! git cat-file -e "${base_ref}^{commit}" 2>/dev/null; then
              base_ref="$(git rev-parse HEAD^ || true)"
            fi
            if [[ -z "${base_ref}" ]]; then
              mapfile -t DIRS < <(find packages -mindepth 1 -maxdepth 1 -type d | sort)
            else
              mapfile -t DIRS < <(
                git diff --name-only "${base_ref}" "$GITHUB_SHA" -- 'packages/**' \
                  | sed -E 's#^packages/([^/]+)/.*$#packages/\1#' | sort -u
              )
            fi
          fi
          printf '%s\n' "${DIRS[@]:-}" > changed_dirs.txt
          [[ -s changed_dirs.txt ]] && echo "has_changes=true" >> "$GITHUB_OUTPUT" || echo "has_changes=false" >> "$GITHUB_OUTPUT"
          cat changed_dirs.txt || true

      - name: no-op
        if: steps.changes.outputs.has_changes != 'true'
        run: echo "No package changes."

      - name: pull-existing-repo
        if: steps.changes.outputs.has_changes == 'true' && steps.repobr.outputs.exists == 'true'
        shell: bash
        run: |
          mkdir -p "$REPO_DIR/$ARCH"
          git worktree add wt "${REPO_BRANCH}"
          rsync -a --delete wt/ "$REPO_DIR/"
          git worktree remove wt --force

      - name: build
        if: steps.changes.outputs.has_changes == 'true'
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$REPO_DIR/$ARCH"
          while read -r d; do
            echo "::group::build $d"
            rm -f "$d"/*.pkg.tar.* || true
            docker run --rm -v "$PWD/$d":/src -w /src archlinux:base-devel bash -lc '
              set -euo pipefail
              pacman -Syu --noconfirm git base-devel sudo
              id -u builder &>/dev/null || useradd -m builder
              chown -R builder:builder /src
              echo "builder ALL=(ALL) NOPASSWD: /usr/bin/pacman" >/etc/sudoers.d/builder
              chmod 440 /etc/sudoers.d/builder
              sudo -u builder bash -lc "makepkg -sCfr --noconfirm"
            '
            cp -v "$d"/*.pkg.tar.zst "$REPO_DIR/$ARCH/"
            echo "::endgroup::"
          done < changed_dirs.txt

      - name: repo-add
        if: steps.changes.outputs.has_changes == 'true'
        shell: bash
        run: |
          docker run --rm -v "$PWD/$REPO_DIR/$ARCH":/repo archlinux:base-devel bash -lc '
            pacman -Syu --noconfirm pacman
            cd /repo
            repo-add '"$DBNAME"'.db.tar.gz ./*.pkg.tar.zst
          '

      - name: publish
        if: steps.changes.outputs.has_changes == 'true'
        uses: peaceiris/actions-gh-pages@v4
        with:
          publish_branch: ${{ env.REPO_BRANCH }}
          publish_dir: ${{ env.REPO_DIR }}
          force_orphan: true
